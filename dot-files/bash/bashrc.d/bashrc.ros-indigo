# -*- shell-script -*-
# ------------------------------------------------------------ #
#
# This file is located in the .bashrc.d directory.  It will be
# run when .bashrc is loaded.
#
# ------------------------------------------------------------
# ROS bashrc: Takes care of ROS stuff
# ------------------------------------------------------------ #

ROS_ROOT=/opt/ros/indigo/
ROS_SETUP=$ROS_ROOT/setup.bash

if [ -f $ROS_SETUP ]
then
    source $ROS_SETUP
fi

# export ROS_PACKAGE_PATH=~/proj/ros/:$ROS_PACKAGE_PATH

# Allow rosmake to run in parallel
export ROS_PARALLEL_JOBS='-j4 -l4'

# Localization settings; required for tab-completion.
export LC_ALL="C"

# Override OS setting for rosdep
ROS_OS_OVERRIDE="ubuntu:14.04:trusty"

# Find the root of the current ros workspace: this is defined as the directory
# that contains the CATKIN_WS_FILE.
CATKIN_WS_FILE=".catkin_workspace"
rosroot () {
  path=$(pwd)
  #while [[ "$path" != "" && ! -e "$path/.catkin_workspace" ]]; do
  while [[ "$path" != "" && ! -e "$path/$CATKIN_WS_FILE" ]]; do
    path=${path%/*}
  done
  echo "$path"
}

# Go to the root directory of the current ROS workspace. If not in a ROS
# workspace, does nothing.
cdrosroot () {
    tmp_root=`rosroot`
    if [ ! -z $tmp_root ]; then
        echo "ROS workspace root: $tmp_root"
        cd $tmp_root
    else
        echo "Not in ROS workspace."
    fi
}

# Simple function to source 'devel/setup.bash' file, relative to the current
# directory. This does not (yet) do any fancy searching.
rospaths () {
    # ros root directory & setup.bash relative location
    ROS_ROOT=`rosroot`
    DEVEL_SETUP=devel/setup.bash

    # Full path to file.
    SETUP_FPATH=$ROS_ROOT/$DEVEL_SETUP
    if [ -f $SETUP_FPATH ]
    then
        path=$(pwd)
        echo "Sourcing $SETUP_FPATH"
        source $SETUP_FPATH
        echo "ROS package path: [$ROS_PACKAGE_PATH].";
        return 1
    else
        echo "$SETUP_FPATH does not exist, are you in a workspace?"
        return 0
    fi
}

# Automatically call catkin_make with the ros root directory.
rosmagicmake() {
    tmp_root=`rosroot`
    if [ ! -z $tmp_root ]; then
        echo "ROS workspace root: $tmp_root. arguments [$@]"
        catkin_make -C $tmp_root "$@"
    else
        echo "Not in ROS workspace."
    fi
}

# Delete all build files in the ROS workspace root (devel, build, and install
# directories). Calls `rm -rf` which will be a no-op if the directory does not
# exist.
rosrmbuild() {
    tmp_root=`rosroot`
    if [ -z $tmp_root ]; then
        echo "Not in ROS workspace."
        return
    else
        echo "Removing build files for ROS workspace: $tmp_root."
        rm -rf $tmp_root/devel
        rm -rf $tmp_root/build
        rm -rf $tmp_root/install
    fi
}

# Deprecate various old ROS commands to make sure you don't use them on
# accident.
ros_deprecated() {
    echo "This ROS command has been deprecated."
}
alias rosmake=ros_deprecated
alias roscreate-pkg=ros_deprecated
alias rosinstall=ros_deprecated
alias rosws=ros_deprecated

# Print ros package path
if [ "$PS1" ]; then
    echo "ROS package path: [$ROS_PACKAGE_PATH].";
fi
